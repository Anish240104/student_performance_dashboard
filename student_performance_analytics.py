# -*- coding: utf-8 -*-
"""student_performance_analytics.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PaKJBKM77d2f9YvpWOsgLWiNMeN9xiFK
"""

# Mount Google Drive
#from google.colab import drive
#drive.mount('/content/drive')

# ✅ Importing required libraries

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

#  Improve plot appearance
sns.set(style="whitegrid")

print("Libraries imported successfully ✅")

# 📂 Upload the student data CSV file

#from google.colab import files
#uploaded = files.upload()

# 📄 Load the uploaded CSV into a pandas DataFrame

import io

# Automatically read the first uploaded file
import streamlit as st
import pandas as pd

# Upload CSV file
uploaded_file = st.file_uploader("Upload your dataset (CSV)", type=["csv"])

if uploaded_file is not None:
    df = pd.read_csv(uploaded_file)
    st.write("Preview of uploaded data:")
    st.write(df)
else:
    st.warning("Please upload a CSV file to proceed.")


import pandas as pd
import io  # only if you're using BytesIO (usually not needed for .csv)

# Assuming you already used:
uploaded_file = st.file_uploader("Upload CSV file", type=["csv"])

if uploaded_file is not None:
    df = pd.read_csv(uploaded_file)  # <-- This is all you need for CSV
    st.write(df)
else:
    st.warning("Please upload a file.")


# 🔍 Preview the data
st_rows, st_cols = df.shape
print(f"✅ Dataset loaded successfully with {st_rows} rows and {st_cols} columns.")
df.head()

# 🧹 Data Cleaning & Feature Engineering

# 1. Show column names to confirm structure
print("📋 Column Names in Dataset:")
print(df.columns.tolist())

# 2. Check for missing/null values
print("\n❓ Missing Values in Each Column:")
print(df.isnull().sum())

# 3. Fill or drop missing values if necessary
# (Uncomment if needed)
# df = df.dropna()
# OR
# df.fillna(method='ffill', inplace=True)

# 4. Calculate average marks across subjects
df['Average Marks'] = df[['Maths', 'Science', 'English']].mean(axis=1)

# 5. Confirm new column
print("\n✅ 'Average Marks' added successfully!")
df[['Name', 'Maths', 'Science', 'English', 'Average Marks']].head()

# 📊 Bar Chart of Average Marks per Student

import matplotlib.pyplot as plt
import seaborn as sns

# Set figure size and style
plt.figure(figsize=(10, 6))
sns.barplot(x='Name', y='Average Marks', data=df, palette='viridis')

# Add titles and rotate labels
plt.title("📚 Average Marks per Student", fontsize=16)
plt.xlabel("Student Name")
plt.ylabel("Average Marks")
plt.xticks(rotation=45)

# Show the chart
plt.tight_layout()
plt.show()

# 📌 Correlation Heatmap – Marks, Attendance, Logins

# Calculate the correlation matrix
corr_matrix = df[['Maths', 'Science', 'English', 'Attendance (%)', 'Login Count', 'Average Marks']].corr()

# Plot heatmap
plt.figure(figsize=(8, 6))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt=".2f", linewidths=0.5)

plt.title("🔥 Correlation Between Academic Metrics", fontsize=14)
plt.xticks(rotation=45)
plt.yticks(rotation=0)
plt.tight_layout()
plt.show()

# 🏅 Top vs Struggling Students – Based on Average Marks

# Set performance threshold (e.g., 60%)
pass_mark = 60

# Sort by average marks
sorted_df = df.sort_values(by='Average Marks', ascending=False)

# Top 3 performers
top_students = sorted_df.head(3)

# Bottom 3 performers (or those below threshold)
struggling_students = df[df['Average Marks'] < pass_mark].sort_values(by='Average Marks')

# 📋 Display Results
print("✅ Top 3 Performing Students:\n")
print(top_students[['Name', 'Average Marks']])

print("\n⚠️ Students Needing Academic Support:\n")
print(struggling_students[['Name', 'Average Marks']])

# 🧮 Categorize students based on attendance percentage
def attendance_level(x):
    if x >= 85:
        return 'High'
    elif x >= 60:
        return 'Moderate'
    else:
        return 'Low'

df['Attendance Level'] = df['Attendance (%)'].apply(attendance_level)

# 📊 Pie chart
attendance_counts = df['Attendance Level'].value_counts()

plt.figure(figsize=(6, 6))
colors = ['#4CAF50', '#FFC107', '#F44336']  # Green, Yellow, Red
plt.pie(attendance_counts, labels=attendance_counts.index, autopct='%1.1f%%', colors=colors, startangle=140)
plt.title("📌 Student Attendance Distribution", fontsize=14)
plt.axis('equal')  # Equal aspect ratio ensures a circle.
plt.show()

# 📈 Distribution of Login Counts

plt.figure(figsize=(8, 5))
sns.histplot(df['Login Count'], bins=8, kde=True, color='skyblue')
plt.title("📥 Student Login Frequency Distribution", fontsize=14)
plt.xlabel("Login Count")
plt.ylabel("Number of Students")
plt.grid(True)
plt.tight_layout()
plt.show()

"""# ✅ Final Insights & Recommendations

### 🔍 Summary of Findings:

- 📊 **Top performers** have average marks above 85% and high attendance.
- ⚠️ **Struggling students** tend to have both **low attendance** and **lower login activity**.
- 🔥 **Correlation analysis** revealed a positive relationship between:
  - **Attendance and Marks**
  - **Login Count and Marks** (in some cases)

### 📌 Recommendations:

- Students with low attendance or login activity may benefit from academic support or mentoring.
- Early intervention based on analytics can help reduce dropout risk.
- Teachers/admins can monitor performance using this dashboard monthly or semester-wise.

---

## 📁 Project Submission Checklist:

- ✅ All 9 notebook cells completed
- ✅ Sample dataset uploaded (`student_data.csv`)
- ✅ Code commented and logically structured
- ✅ Visuals include bar chart, heatmap, pie chart, histogram
- ✅ Final analysis written in clear, professional style

---



**🧠 Built with Python, visualized with care, and submitted with purpose.**


"""
